# .gemini/commands/ricc/update_gh_pages.toml

description = "Reconcile apps in random-apps-ideas/ with JSON in GitHub Pages."
prompt = """
You are an expert Software Engineer. You understand this BoothIdeas Repo as it has 3 moving parts:

## ENV vars

* CURRENT_TIMESTAMP: `date +%Y%m%d-%H%M%S`
* CURRENT_HOSTNAME: `hostname`

## Current repo

1. `ideas-app/`: the FrontEnd app which users interact with => generates a new Issue in this label: https://github.com/palladius/booth-ideas-sg/issues?q=label%3A%22pauldatta-app%22
2. `random-apps-ideas/`: a collection of app ideas: one per folder.
3. `gh-pages/`: the GitHub Pages branch that serves the static site https://palladius.github.io/booth-ideas-sg/

## Covered apps

Apps already convered are these:

```json
!{bin/check-issue-id-and-screenshots.sh}
```

## Your job

Your job is to ensure that the files in (2) are accurately represented in (3).

Input:
* Do a `ls -al random-app-ideas/` and check for the latest RECENT additions.
    * A good command could be `ls -altr random-app-ideas/ | tail -7` to see the last 5 added apps (., .. included).
* For example, let's say it contains app1/ app2/ app3/.

Output:
* Check the file `gh-pages/palladius.json`.
* say it contains app_previous1, app_previous2, app_previous42, app_previous84,  app1/,  app3/ .
    * Then your action is to ADD the app3 (do NOT remove stuff, I use other stuff to test the UI!

## Helper scripts"

1. Run `bin/reconcile-apps.sh` to see the status of Apps locally vs issues.

## Issue finding

1. Check the latest issues in the GitHub repository for any new app ideas online. This permalink gives you ALL the issues: https://github.com/palladius/booth-ideas-sg/issues?q=is%3Aissue%20%20label%3Apauldatta-app
3. Alternatively, you can find them locally with a `ls random-app-ideas/`. Example:

```
ls -al random-apps-ideas/
drwxr-xr-x  4 ricc primarygroup 4096 Sep  4 11:47 01--cuckoo-clock-app # Issue 1 -> https://github.com/palladius/booth-ideas-sg/issues/1
drwxr-xr-x  4 ricc primarygroup 4096 Sep  4 11:47 02--fondue-app # Issue 2 -> https://github.com/palladius/booth-ideas-sg/issues/2
drwxr-xr-x  2 ricc primarygroup 4096 Sep  4 12:44 21--multiflag-app # Issue 21 -> https://github.com/palladius/booth-ideas-sg/issues/21

4. Issues are linked to the idea with this

## Fix missing issue

* If an app folder is not starting with "NN--" where NN is the issue number, then something failed, but no problem, you can fix it!
* Check the commit history to find when this was added.
    * Check the GH issue and GH PR which committed this commit hash. you can also match the title of issues via `gh` with the folder name, whichever is easier.
    * Find the issue number.
    * This problem was solved by Gemini before - please read this if needed: `docs/LINKING_COMMIT_HASH_TO_ISSUE.md`
* Rename the folder to "NN--APP_NAME" where APP_NAME is the rest of the folder name, using `git mv`.
* Commit the change to the main branch with "Fix folder name to include issue number #NN" and push it. This will link the change on GH to the issue!

## How to add an application.

You need to populate a JSON which contains a few fields for the following.

Let me start with an Example, and lets refine it then.

```json
        {
            "createdAt": "2025-09-03T09:00:00Z",
            "appName": "pill-calendar-app",
            "number": 1,
            "title": "ðŸ‡®ðŸ‡¹ðŸ‡¨ðŸ‡­ A Cuckoo Clock That Tweets Jokes",
            "url": "https://github.com/palladius/booth-ideas-sg/issues/1",
            "author": "palladius", // User nickname
            "emoji": "ðŸ‡®ðŸ‡¹ðŸ‡¨ðŸ‡­",
            "abstract": "This app rings a cuckoo sound when you press the button",
            "screenshot": "random-app-ideas/cuckoo-clock-app/screenshot-800x600.png",
            "category": "Food"
        }
```

Notes on the field:

1. Use CURRENT_TIMESTAMP for `createdAt`.
2. Number and url are redundant: they both point to the same issue. You need an issue number for it. If no issue is available,
   abort with "Missing ISsue Number!" and some emoji of desperation. If IssieNumber is 42, you'll have "number": 42, and
   "url": "https://github.com/palladius/booth-ideas-sg/issues/42"
3. Category: Choose the best-fitting Category. Use the existing categories (Crafts, Technology, Art, Music, Food, etc.) but
   don't hesitate to create a new one if you think so. It's also ok to change/harmonize existing categories if you find a better one.
   Note we shouldn't have more than 12-15 categories. We don't want ONE different category as they're there to GROUP things.
4. Title: Find a fitting title for the application. If emoji and nicknames are available, add the first to the left.
    Cleanup the title, remove "[AppIdea]" and "-- by XXX", just use a small meaningful app title. Max 5 words.
5. Nickname: nickname from the issue. this should be mandatory, but if you dont find it its ok to omit.
6. Emoji: Evince it from the issue, or title, or anything
7. Abstract: "A small abstract of what the app does."
8. Screenshot: if you find a `screenshot*.png` in the root folder of the app, then please include the relative path to the screenshot file.
   If not, leave it empty. See how to copy a screenshot belowappName
9. appName: Take it from the folder app name and remove the initial ID and dashes ("25--pill-calendar-app" => "pill-calendar-app").

## Copy screenshots

* GH Pages only sees code under `gh_pages`, so you can't point to a picture under `../random-apps-ideas/APP/screen.png`..
* Images are under `gh-pages/images`.
* You're allowed to copy pictures to solve this, for instance

```bash
# Sample commands
cp random-apps-ideas/02--fondue-app/screenshot-800x600.png       gh-pages/images/random-app-ideas/screenshots/fondue-app.png
cp random-apps-ideas/01--cuckoo-clock-app/screenshot-800x600.png gh-pages/images/random-app-ideas/screenshots/cuckoo-clock-app.png
```

So copy the original screenshot into `gh-pages/images/random-app-ideas/screenshots/`.
Note that this new file needs to be reflected correctly under `gh-pages/palladius.json`.

### Missing screenshots

Missing screenshots can be found this way: `bin/find-missing-screenshots.sh`

Existing screenshots can be found this way: `bin/check-issue-id-and-screenshots.sh`

## rules of the game

* DO NOT ALTER EXISTING CODE
* Do NOT CREATE SCRIPTS to automate anything.
* You work in read-mode, and you're ONLY allowed to write the `gh-pages/palladius.json`
* You're also allowed to copy screenshots from `random-apps-ideas/` onto gh-pages/
* You can study, understand, everything but you can only write ONE file.
* If you feel the temptation of improving the process, just comment on an issue with your proposal, or frustrations.

## Growing the JSON, not shrinking

AI has a tendency to add a new field and REMOVE existing fields. DO NOT DO THAT.
* A good test is to count the apps with screenshots in `gh-pages/images/random-app-ideas/screenshots/`
* Try to ensure all those screenshots are covered somewhere in the JSON, using `bin/check-issue-id-and-screenshots.sh`.
* Ensure all images in gh-pages/images/random-app-ideas/screenshots/ are prepended by `PADDED_ISSUE_ID` as in the original folder.
* images should look like this: {"screenshot": "images/random-app-ideas/screenshots/fondue-app.png" }, WITHOUT the `gh-pages/` prefix.
## Final actions

* Once done, do a `git status`.
* IF the only file changed is `gh-pages/palladius.json`, then run
    * `git add gh-pages/palladius.json`
    * `git add gh-pages/images/`
    * `git commit -m "Update GH Pages JSON"`.
    * `git push main`

## Parameters

The user's request is:

{{args}}
"""


## TODO
# - [ ] P1 Implement screenshot on the frontend (requires copying images from outside gh_pages/ to inside. Trivial but stil..
# - [ ] P2 Find a smart way to autodetect the issue. Could be based on folder names, like "01-cuckoo" / "02-hedgehog", or
#          could be adding a blueprint.yaml with that info. but this complicates the GHA which i did not write.
# - [ ] P4 Find a smart way to have screenshots automatically included in the JSON.

