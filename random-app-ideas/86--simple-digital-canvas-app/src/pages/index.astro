---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  <main>
    <h1>Simple Digital Canvas</h1>
    <div class="controls">
      <button id="undo">Undo</button>
      <button id="redo">Redo</button>
      <button id="clear">Clear</button>
      <a id="export" href="#" download="drawing.png">Export to PNG</a>
    </div>
    <div class="color-palette">
      <div class="color selected" style="background-color: black;" data-color="black"></div>
      <div class="color" style="background-color: red;" data--color="red"></div>
      <div class="color" style="background-color: green;" data-color="green"></div>
      <div class="color" style="background-color: blue;" data-color="blue"></div>
      <div class="color" style="background-color: yellow;" data-color="yellow"></div>
      <div class="color" style="background-color: white;" data-color="white"></div>
      <div class="color" style="background-color: purple;" data-color="purple"></div>
      <div class="color" style="background-color: orange;" data-color="orange"></div>
    </div>
    <canvas id="canvas" width="800" height="800"></canvas>
  </main>
</Layout>

<style>
  main {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
  }

  .controls {
    display: flex;
    gap: 10px;
  }

  .color-palette {
    display: flex;
    gap: 10px;
  }

  .color {
    width: 30px;
    height: 30px;
    border: 1px solid #ccc;
    cursor: pointer;
  }

  .color.selected {
    border: 2px solid blue;
  }

  canvas {
    border: 1px solid black;
  }
</style>

<script>
  const canvas = document.getElementById('canvas') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d')!;
  let isDrawing = false;
  let lastX = 0;
  let lastY = 0;
  let currentColor = 'black';
  let history: ImageData[] = [];
  let historyIndex = -1;

  function saveState() {
    if (historyIndex < history.length - 1) {
      history.splice(historyIndex + 1);
    }
    history.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
    historyIndex++;
  }

  function restoreState() {
    if (historyIndex >= 0) {
      ctx.putImageData(history[historyIndex], 0, 0);
    }
  }

  function draw(e: MouseEvent) {
    if (!isDrawing) return;
    ctx.strokeStyle = currentColor;
    ctx.lineJoin = 'round';
    ctx.lineCap = 'round';
    ctx.lineWidth = 5;
    ctx.beginPath();
    ctx.moveTo(lastX, lastY);
    ctx.lineTo(e.offsetX, e.offsetY);
    ctx.stroke();
    [lastX, lastY] = [e.offsetX, e.offsetY];
  }

  canvas.addEventListener('mousedown', (e) => {
    isDrawing = true;
    [lastX, lastY] = [e.offsetX, e.offsetY];
  });

  canvas.addEventListener('mousemove', draw);
  canvas.addEventListener('mouseup', () => {
    isDrawing = false;
    saveState();
  });
  canvas.addEventListener('mouseout', () => isDrawing = false);

  // Color Palette
  const colors = document.querySelectorAll('.color');
  colors.forEach(color => {
    color.addEventListener('click', () => {
      colors.forEach(c => c.classList.remove('selected'));
      color.classList.add('selected');
      currentColor = (color as HTMLElement).dataset.color!;
    });
  });

  // Controls
  const undoButton = document.getElementById('undo')!;
  const redoButton = document.getElementById('redo')!;
  const clearButton = document.getElementById('clear')!;
  const exportButton = document.getElementById('export') as HTMLAnchorElement;

  undoButton.addEventListener('click', () => {
    if (historyIndex > 0) {
      historyIndex--;
      restoreState();
    }
  });

  redoButton.addEventListener('click', () => {
    if (historyIndex < history.length - 1) {
      historyIndex++;
      restoreState();
    }
  });

  clearButton.addEventListener('click', () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    saveState();
  });

  exportButton.addEventListener('click', () => {
    exportButton.href = canvas.toDataURL('image/png');
  });

  // Initial state
  saveState();
</script>
