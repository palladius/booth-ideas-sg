---
---
<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Italian Emoji Tic-Tac-Toe</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #fdf8e1;
        }
        h1 {
            color: #d64541;
            font-size: 3rem;
            margin-bottom: 1rem;
        }
        #game-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 10px;
            margin-bottom: 20px;
        }
        .cell {
            width: 100px;
            height: 100px;
            background-color: #fff;
            border: 2px solid #009473;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 50px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .cell:hover {
            background-color: #f0f0f0;
        }
        .cell.win {
            animation: win-animation 0.5s ease-in-out;
        }
        @keyframes win-animation {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        #status {
            font-size: 24px;
            margin-bottom: 20px;
            color: #333;
        }
        #reset-button {
            padding: 10px 20px;
            font-size: 18px;
            cursor: pointer;
            background-color: #009473;
            color: white;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        #reset-button:hover {
            background-color: #007a63;
        }
    </style>
</head>
<body>
    <h1>Italian Emoji Tic-Tac-Toe</h1>
    <div id="game-board">
        <div class="cell" data-index="0"></div>
        <div class="cell" data-index="1"></div>
        <div class="cell" data-index="2"></div>
        <div class="cell" data-index="3"></div>
        <div class="cell" data-index="4"></div>
        <div class="cell" data-index="5"></div>
        <div class="cell" data-index="6"></div>
        <div class="cell" data-index="7"></div>
        <div class="cell" data-index="8"></div>
    </div>
    <div id="status">Player 🇮🇹's turn</div>
    <button id="reset-button">Reset Game</button>

    <script>
        const board = document.getElementById('game-board');
        const cells = document.querySelectorAll('.cell');
        const statusDisplay = document.getElementById('status');
        const resetButton = document.getElementById('reset-button');

        let currentPlayer = '🇮🇹';
        let boardState = ['', '', '', '', '', '', '', '', ''];
        let gameActive = true;

        const winningConditions = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        function handleCellClick(event) {
            const clickedCell = event.target;
            const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

            if (boardState[clickedCellIndex] !== '' || !gameActive) {
                return;
            }

            boardState[clickedCellIndex] = currentPlayer;
            clickedCell.textContent = currentPlayer;

            handleResultValidation();
        }

        function handleResultValidation() {
            let roundWon = false;
            let winningCombination = [];
            for (let i = 0; i < winningConditions.length; i++) {
                const winCondition = winningConditions[i];
                let a = boardState[winCondition[0]];
                let b = boardState[winCondition[1]];
                let c = boardState[winCondition[2]];

                if (a === '' || b === '' || c === '') {
                    continue;
                }
                if (a === b && b === c) {
                    roundWon = true;
                    winningCombination = winCondition;
                    break;
                }
            }

            if (roundWon) {
                statusDisplay.textContent = `Player ${currentPlayer} has won!`;
                gameActive = false;
                winningCombination.forEach(index => {
                    cells[index].classList.add('win');
                });
                return;
            }

            let roundDraw = !boardState.includes('');
            if (roundDraw) {
                statusDisplay.textContent = 'Game ended in a draw!';
                gameActive = false;
                return;
            }

            currentPlayer = currentPlayer === '🇮🇹' ? '🍕' : '🇮🇹';
            statusDisplay.textContent = `Player ${currentPlayer}'s turn`;
        }

        function handleResetGame() {
            boardState = ['', '', '', '', '', '', '', '', ''];
            gameActive = true;
            currentPlayer = '🇮🇹';
            statusDisplay.textContent = `Player ${currentPlayer}'s turn`;
            cells.forEach(cell => {
                cell.textContent = '';
                cell.classList.remove('win');
            });
        }

        cells.forEach(cell => cell.addEventListener('click', handleCellClick));
        resetButton.addEventListener('click', handleResetGame);
    </script>
</body>
</html>